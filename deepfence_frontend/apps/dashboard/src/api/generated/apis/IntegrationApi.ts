/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ModelAIIntegrationCloudPostureRequest,
  ModelAIIntegrationListResponse,
  ModelAIIntegrationMessageResponse,
  ModelAIIntegrationVulnerabilityRequest,
  ModelAddAIIntegrationRequest,
  ModelIntegrationAddReq,
  ModelIntegrationListResp,
  ModelMessageResponse,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ModelAIIntegrationCloudPostureRequestFromJSON,
    ModelAIIntegrationCloudPostureRequestToJSON,
    ModelAIIntegrationListResponseFromJSON,
    ModelAIIntegrationListResponseToJSON,
    ModelAIIntegrationMessageResponseFromJSON,
    ModelAIIntegrationMessageResponseToJSON,
    ModelAIIntegrationVulnerabilityRequestFromJSON,
    ModelAIIntegrationVulnerabilityRequestToJSON,
    ModelAddAIIntegrationRequestFromJSON,
    ModelAddAIIntegrationRequestToJSON,
    ModelIntegrationAddReqFromJSON,
    ModelIntegrationAddReqToJSON,
    ModelIntegrationListRespFromJSON,
    ModelIntegrationListRespToJSON,
    ModelMessageResponseFromJSON,
    ModelMessageResponseToJSON,
} from '../models';

export interface AIIntegrationCloudPostureQueryRequest {
    modelAIIntegrationCloudPostureRequest?: ModelAIIntegrationCloudPostureRequest;
}

export interface AIIntegrationVulnerabilityQueryRequest {
    modelAIIntegrationVulnerabilityRequest?: ModelAIIntegrationVulnerabilityRequest;
}

export interface AddAIIntegrationRequest {
    modelAddAIIntegrationRequest?: ModelAddAIIntegrationRequest;
}

export interface AddIntegrationRequest {
    modelIntegrationAddReq?: ModelIntegrationAddReq;
}

export interface DeleteAIIntegrationRequest {
    integrationId: string;
}

export interface DeleteIntegrationRequest {
    integrationId: string;
}

/**
 * IntegrationApi - interface
 * 
 * @export
 * @interface IntegrationApiInterface
 */
export interface IntegrationApiInterface {
    /**
     * Send Cloud Posture query to AI Integration
     * @summary Send Cloud Posture query to AI Integration
     * @param {ModelAIIntegrationCloudPostureRequest} [modelAIIntegrationCloudPostureRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    aIIntegrationCloudPostureQueryRaw(requestParameters: AIIntegrationCloudPostureQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAIIntegrationMessageResponse>>;

    /**
     * Send Cloud Posture query to AI Integration
     * Send Cloud Posture query to AI Integration
     */
    aIIntegrationCloudPostureQuery(requestParameters: AIIntegrationCloudPostureQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAIIntegrationMessageResponse>;

    /**
     * Send Vulnerability query to AI Integration
     * @summary Send Vulnerability query to AI Integration
     * @param {ModelAIIntegrationVulnerabilityRequest} [modelAIIntegrationVulnerabilityRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    aIIntegrationVulnerabilityQueryRaw(requestParameters: AIIntegrationVulnerabilityQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAIIntegrationMessageResponse>>;

    /**
     * Send Vulnerability query to AI Integration
     * Send Vulnerability query to AI Integration
     */
    aIIntegrationVulnerabilityQuery(requestParameters: AIIntegrationVulnerabilityQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAIIntegrationMessageResponse>;

    /**
     * Add a new supported AI Integration
     * @summary Add AI Integration
     * @param {ModelAddAIIntegrationRequest} [modelAddAIIntegrationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    addAIIntegrationRaw(requestParameters: AddAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelMessageResponse>>;

    /**
     * Add a new supported AI Integration
     * Add AI Integration
     */
    addAIIntegration(requestParameters: AddAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelMessageResponse>;

    /**
     * Add a new supported integration
     * @summary Add Integration
     * @param {ModelIntegrationAddReq} [modelIntegrationAddReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    addIntegrationRaw(requestParameters: AddIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelMessageResponse>>;

    /**
     * Add a new supported integration
     * Add Integration
     */
    addIntegration(requestParameters: AddIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelMessageResponse>;

    /**
     * Delete AI integration
     * @summary Delete AI Integration
     * @param {string} integrationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    deleteAIIntegrationRaw(requestParameters: DeleteAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete AI integration
     * Delete AI Integration
     */
    deleteAIIntegration(requestParameters: DeleteAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete integration
     * @summary Delete Integration
     * @param {string} integrationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete integration
     * Delete Integration
     */
    deleteIntegration(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * List all the added AI Integrations
     * @summary List AI Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    listAIIntegrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelAIIntegrationListResponse>>>;

    /**
     * List all the added AI Integrations
     * List AI Integrations
     */
    listAIIntegration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelAIIntegrationListResponse>>;

    /**
     * List all the added Integrations
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiInterface
     */
    listIntegrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelIntegrationListResp>>>;

    /**
     * List all the added Integrations
     * List Integrations
     */
    listIntegration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelIntegrationListResp>>;

}

/**
 * 
 */
export class IntegrationApi extends runtime.BaseAPI implements IntegrationApiInterface {

    /**
     * Send Cloud Posture query to AI Integration
     * Send Cloud Posture query to AI Integration
     */
    async aIIntegrationCloudPostureQueryRaw(requestParameters: AIIntegrationCloudPostureQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAIIntegrationMessageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ai-integration/query/cloud-posture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelAIIntegrationCloudPostureRequestToJSON(requestParameters.modelAIIntegrationCloudPostureRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAIIntegrationMessageResponseFromJSON(jsonValue));
    }

    /**
     * Send Cloud Posture query to AI Integration
     * Send Cloud Posture query to AI Integration
     */
    async aIIntegrationCloudPostureQuery(requestParameters: AIIntegrationCloudPostureQueryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAIIntegrationMessageResponse> {
        const response = await this.aIIntegrationCloudPostureQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send Vulnerability query to AI Integration
     * Send Vulnerability query to AI Integration
     */
    async aIIntegrationVulnerabilityQueryRaw(requestParameters: AIIntegrationVulnerabilityQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAIIntegrationMessageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ai-integration/query/vulnerability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelAIIntegrationVulnerabilityRequestToJSON(requestParameters.modelAIIntegrationVulnerabilityRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAIIntegrationMessageResponseFromJSON(jsonValue));
    }

    /**
     * Send Vulnerability query to AI Integration
     * Send Vulnerability query to AI Integration
     */
    async aIIntegrationVulnerabilityQuery(requestParameters: AIIntegrationVulnerabilityQueryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAIIntegrationMessageResponse> {
        const response = await this.aIIntegrationVulnerabilityQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new supported AI Integration
     * Add AI Integration
     */
    async addAIIntegrationRaw(requestParameters: AddAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelMessageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ai-integration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelAddAIIntegrationRequestToJSON(requestParameters.modelAddAIIntegrationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelMessageResponseFromJSON(jsonValue));
    }

    /**
     * Add a new supported AI Integration
     * Add AI Integration
     */
    async addAIIntegration(requestParameters: AddAIIntegrationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelMessageResponse> {
        const response = await this.addAIIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new supported integration
     * Add Integration
     */
    async addIntegrationRaw(requestParameters: AddIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelMessageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/integration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelIntegrationAddReqToJSON(requestParameters.modelIntegrationAddReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelMessageResponseFromJSON(jsonValue));
    }

    /**
     * Add a new supported integration
     * Add Integration
     */
    async addIntegration(requestParameters: AddIntegrationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelMessageResponse> {
        const response = await this.addIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete AI integration
     * Delete AI Integration
     */
    async deleteAIIntegrationRaw(requestParameters: DeleteAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling deleteAIIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ai-integration/{integration_id}`.replace(`{${"integration_id"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete AI integration
     * Delete AI Integration
     */
    async deleteAIIntegration(requestParameters: DeleteAIIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAIIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete integration
     * Delete Integration
     */
    async deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling deleteIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/integration/{integration_id}`.replace(`{${"integration_id"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete integration
     * Delete Integration
     */
    async deleteIntegration(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     * List all the added AI Integrations
     * List AI Integrations
     */
    async listAIIntegrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelAIIntegrationListResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ai-integration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelAIIntegrationListResponseFromJSON));
    }

    /**
     * List all the added AI Integrations
     * List AI Integrations
     */
    async listAIIntegration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelAIIntegrationListResponse>> {
        const response = await this.listAIIntegrationRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all the added Integrations
     * List Integrations
     */
    async listIntegrationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelIntegrationListResp>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/integration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelIntegrationListRespFromJSON));
    }

    /**
     * List all the added Integrations
     * List Integrations
     */
    async listIntegration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelIntegrationListResp>> {
        const response = await this.listIntegrationRaw(initOverrides);
        return await response.value();
    }

}
