/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelAiIntegrationKubernetesPostureRequest
 */
export interface ModelAiIntegrationKubernetesPostureRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationKubernetesPostureRequest
     */
    compliance_check_type: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationKubernetesPostureRequest
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationKubernetesPostureRequest
     */
    integration_type?: ModelAiIntegrationKubernetesPostureRequestIntegrationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationKubernetesPostureRequest
     */
    query_type: ModelAiIntegrationKubernetesPostureRequestQueryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationKubernetesPostureRequest
     */
    remediation_format: ModelAiIntegrationKubernetesPostureRequestRemediationFormatEnum;
}


/**
 * @export
 */
export const ModelAiIntegrationKubernetesPostureRequestIntegrationTypeEnum = {
    Openai: 'openai'
} as const;
export type ModelAiIntegrationKubernetesPostureRequestIntegrationTypeEnum = typeof ModelAiIntegrationKubernetesPostureRequestIntegrationTypeEnum[keyof typeof ModelAiIntegrationKubernetesPostureRequestIntegrationTypeEnum];

/**
 * @export
 */
export const ModelAiIntegrationKubernetesPostureRequestQueryTypeEnum = {
    Remediation: 'remediation'
} as const;
export type ModelAiIntegrationKubernetesPostureRequestQueryTypeEnum = typeof ModelAiIntegrationKubernetesPostureRequestQueryTypeEnum[keyof typeof ModelAiIntegrationKubernetesPostureRequestQueryTypeEnum];

/**
 * @export
 */
export const ModelAiIntegrationKubernetesPostureRequestRemediationFormatEnum = {
    All: 'all',
    Cli: 'cli',
    Pulumi: 'pulumi',
    Terraform: 'terraform'
} as const;
export type ModelAiIntegrationKubernetesPostureRequestRemediationFormatEnum = typeof ModelAiIntegrationKubernetesPostureRequestRemediationFormatEnum[keyof typeof ModelAiIntegrationKubernetesPostureRequestRemediationFormatEnum];


/**
 * Check if a given object implements the ModelAiIntegrationKubernetesPostureRequest interface.
 */
export function instanceOfModelAiIntegrationKubernetesPostureRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "compliance_check_type" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "query_type" in value;
    isInstance = isInstance && "remediation_format" in value;

    return isInstance;
}

export function ModelAiIntegrationKubernetesPostureRequestFromJSON(json: any): ModelAiIntegrationKubernetesPostureRequest {
    return ModelAiIntegrationKubernetesPostureRequestFromJSONTyped(json, false);
}

export function ModelAiIntegrationKubernetesPostureRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelAiIntegrationKubernetesPostureRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compliance_check_type': json['compliance_check_type'],
        'description': json['description'],
        'integration_type': !exists(json, 'integration_type') ? undefined : json['integration_type'],
        'query_type': json['query_type'],
        'remediation_format': json['remediation_format'],
    };
}

export function ModelAiIntegrationKubernetesPostureRequestToJSON(value?: ModelAiIntegrationKubernetesPostureRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compliance_check_type': value.compliance_check_type,
        'description': value.description,
        'integration_type': value.integration_type,
        'query_type': value.query_type,
        'remediation_format': value.remediation_format,
    };
}

