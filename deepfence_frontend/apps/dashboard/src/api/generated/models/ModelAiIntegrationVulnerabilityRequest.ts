/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelAiIntegrationVulnerabilityRequest
 */
export interface ModelAiIntegrationVulnerabilityRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationVulnerabilityRequest
     */
    cve_caused_by_package: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationVulnerabilityRequest
     */
    cve_id: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationVulnerabilityRequest
     */
    cve_type: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationVulnerabilityRequest
     */
    integration_type?: ModelAiIntegrationVulnerabilityRequestIntegrationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationVulnerabilityRequest
     */
    query_type: ModelAiIntegrationVulnerabilityRequestQueryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationVulnerabilityRequest
     */
    remediation_format: ModelAiIntegrationVulnerabilityRequestRemediationFormatEnum;
}


/**
 * @export
 */
export const ModelAiIntegrationVulnerabilityRequestIntegrationTypeEnum = {
    Openai: 'openai'
} as const;
export type ModelAiIntegrationVulnerabilityRequestIntegrationTypeEnum = typeof ModelAiIntegrationVulnerabilityRequestIntegrationTypeEnum[keyof typeof ModelAiIntegrationVulnerabilityRequestIntegrationTypeEnum];

/**
 * @export
 */
export const ModelAiIntegrationVulnerabilityRequestQueryTypeEnum = {
    Remediation: 'remediation'
} as const;
export type ModelAiIntegrationVulnerabilityRequestQueryTypeEnum = typeof ModelAiIntegrationVulnerabilityRequestQueryTypeEnum[keyof typeof ModelAiIntegrationVulnerabilityRequestQueryTypeEnum];

/**
 * @export
 */
export const ModelAiIntegrationVulnerabilityRequestRemediationFormatEnum = {
    All: 'all',
    Cli: 'cli',
    Pulumi: 'pulumi',
    Terraform: 'terraform'
} as const;
export type ModelAiIntegrationVulnerabilityRequestRemediationFormatEnum = typeof ModelAiIntegrationVulnerabilityRequestRemediationFormatEnum[keyof typeof ModelAiIntegrationVulnerabilityRequestRemediationFormatEnum];


/**
 * Check if a given object implements the ModelAiIntegrationVulnerabilityRequest interface.
 */
export function instanceOfModelAiIntegrationVulnerabilityRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cve_caused_by_package" in value;
    isInstance = isInstance && "cve_id" in value;
    isInstance = isInstance && "cve_type" in value;
    isInstance = isInstance && "query_type" in value;
    isInstance = isInstance && "remediation_format" in value;

    return isInstance;
}

export function ModelAiIntegrationVulnerabilityRequestFromJSON(json: any): ModelAiIntegrationVulnerabilityRequest {
    return ModelAiIntegrationVulnerabilityRequestFromJSONTyped(json, false);
}

export function ModelAiIntegrationVulnerabilityRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelAiIntegrationVulnerabilityRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cve_caused_by_package': json['cve_caused_by_package'],
        'cve_id': json['cve_id'],
        'cve_type': json['cve_type'],
        'integration_type': !exists(json, 'integration_type') ? undefined : json['integration_type'],
        'query_type': json['query_type'],
        'remediation_format': json['remediation_format'],
    };
}

export function ModelAiIntegrationVulnerabilityRequestToJSON(value?: ModelAiIntegrationVulnerabilityRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cve_caused_by_package': value.cve_caused_by_package,
        'cve_id': value.cve_id,
        'cve_type': value.cve_type,
        'integration_type': value.integration_type,
        'query_type': value.query_type,
        'remediation_format': value.remediation_format,
    };
}

