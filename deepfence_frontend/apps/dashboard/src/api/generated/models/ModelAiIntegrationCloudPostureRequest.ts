/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelAiIntegrationCloudPostureRequest
 */
export interface ModelAiIntegrationCloudPostureRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    cloud_provider: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    compliance_check_type: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    group?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    integration_type?: ModelAiIntegrationCloudPostureRequestIntegrationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    query_type: ModelAiIntegrationCloudPostureRequestQueryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    remediation_format: ModelAiIntegrationCloudPostureRequestRemediationFormatEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    service?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAiIntegrationCloudPostureRequest
     */
    title: string;
}


/**
 * @export
 */
export const ModelAiIntegrationCloudPostureRequestIntegrationTypeEnum = {
    Openai: 'openai'
} as const;
export type ModelAiIntegrationCloudPostureRequestIntegrationTypeEnum = typeof ModelAiIntegrationCloudPostureRequestIntegrationTypeEnum[keyof typeof ModelAiIntegrationCloudPostureRequestIntegrationTypeEnum];

/**
 * @export
 */
export const ModelAiIntegrationCloudPostureRequestQueryTypeEnum = {
    Remediation: 'remediation'
} as const;
export type ModelAiIntegrationCloudPostureRequestQueryTypeEnum = typeof ModelAiIntegrationCloudPostureRequestQueryTypeEnum[keyof typeof ModelAiIntegrationCloudPostureRequestQueryTypeEnum];

/**
 * @export
 */
export const ModelAiIntegrationCloudPostureRequestRemediationFormatEnum = {
    All: 'all',
    Cli: 'cli',
    Pulumi: 'pulumi',
    Terraform: 'terraform'
} as const;
export type ModelAiIntegrationCloudPostureRequestRemediationFormatEnum = typeof ModelAiIntegrationCloudPostureRequestRemediationFormatEnum[keyof typeof ModelAiIntegrationCloudPostureRequestRemediationFormatEnum];


/**
 * Check if a given object implements the ModelAiIntegrationCloudPostureRequest interface.
 */
export function instanceOfModelAiIntegrationCloudPostureRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cloud_provider" in value;
    isInstance = isInstance && "compliance_check_type" in value;
    isInstance = isInstance && "query_type" in value;
    isInstance = isInstance && "remediation_format" in value;
    isInstance = isInstance && "title" in value;

    return isInstance;
}

export function ModelAiIntegrationCloudPostureRequestFromJSON(json: any): ModelAiIntegrationCloudPostureRequest {
    return ModelAiIntegrationCloudPostureRequestFromJSONTyped(json, false);
}

export function ModelAiIntegrationCloudPostureRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelAiIntegrationCloudPostureRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cloud_provider': json['cloud_provider'],
        'compliance_check_type': json['compliance_check_type'],
        'group': !exists(json, 'group') ? undefined : json['group'],
        'integration_type': !exists(json, 'integration_type') ? undefined : json['integration_type'],
        'query_type': json['query_type'],
        'remediation_format': json['remediation_format'],
        'service': !exists(json, 'service') ? undefined : json['service'],
        'title': json['title'],
    };
}

export function ModelAiIntegrationCloudPostureRequestToJSON(value?: ModelAiIntegrationCloudPostureRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cloud_provider': value.cloud_provider,
        'compliance_check_type': value.compliance_check_type,
        'group': value.group,
        'integration_type': value.integration_type,
        'query_type': value.query_type,
        'remediation_format': value.remediation_format,
        'service': value.service,
        'title': value.title,
    };
}

